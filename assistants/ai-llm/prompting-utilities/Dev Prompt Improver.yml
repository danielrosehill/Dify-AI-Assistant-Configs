app:
  description: ''
  icon: ðŸ¤–
  icon_background: '#FFEAD5'
  mode: chat
  name: Dev Prompt Improver
  use_icon_as_answer_icon: false
kind: app
model_config:
  agent_mode:
    enabled: false
    max_iteration: 5
    strategy: function_call
    tools: []
  annotation_reply:
    enabled: false
  chat_prompt_config: {}
  completion_prompt_config: {}
  dataset_configs:
    datasets:
      datasets: []
    reranking_enable: false
    retrieval_model: multiple
    top_k: 4
  dataset_query_variable: ''
  external_data_tools: []
  file_upload:
    allowed_file_extensions:
    - .JPG
    - .JPEG
    - .PNG
    - .GIF
    - .WEBP
    - .SVG
    - .MP4
    - .MOV
    - .MPEG
    - .MPGA
    allowed_file_types:
    - document
    allowed_file_upload_methods:
    - remote_url
    - local_file
    enabled: true
    image:
      detail: high
      enabled: false
      number_limits: 3
      transfer_methods:
      - remote_url
      - local_file
    number_limits: 3
  model:
    completion_params:
      stop: []
    mode: chat
    name: gemini-2.0-flash-exp
    provider: google
  more_like_this:
    enabled: false
  opening_statement: ''
  pre_prompt: You are the development prompt improver. You can refer to development
    prompts as dev prompts for short if you like. Development prompts are prompts
    written for AI assistants, asking them to develop a piece of software. The user
    has written a development prompt and before they submit it to a large language
    model or assistant, they would like your help in improving it. You should be on
    the lookout for the following. Does the development prompt set out in sufficient
    detail the required features? Is there ambiguity in the prompt that the user may
    wish to resolve? Could the development prompt be structured more effectively to
    make it easier for the assistant to parse? If you need the user's feedback before
    acting any of your proposed edits, ask them for it. You can present your proposed
    edits as a numbered list or ask them questions. Where possible, try to use the
    question and answer format. Once you've gathered the user's feedback and approval,
    you can now edit the original development prompt into an improved version. Provide
    the improved version of the prompt in Markdown within a code fence for the user
    to easily copy and paste into their tool.Â 
  prompt_type: simple
  retriever_resource:
    enabled: true
  sensitive_word_avoidance:
    configs: []
    enabled: false
    type: ''
  speech_to_text:
    enabled: true
  suggested_questions: []
  suggested_questions_after_answer:
    enabled: false
  text_to_speech:
    enabled: true
  user_input_form: []
version: 0.1.5

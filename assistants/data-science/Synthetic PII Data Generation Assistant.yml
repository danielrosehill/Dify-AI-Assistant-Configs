app:
  description: ''
  icon: ðŸ¤–
  icon_background: '#FFEAD5'
  mode: chat
  name: Synthetic PII Data Generation Assistant
  use_icon_as_answer_icon: false
kind: app
model_config:
  agent_mode:
    enabled: false
    max_iteration: 5
    strategy: function_call
    tools: []
  annotation_reply:
    enabled: false
  chat_prompt_config: {}
  completion_prompt_config: {}
  dataset_configs:
    datasets:
      datasets: []
    reranking_enable: false
    retrieval_model: multiple
    top_k: 4
  dataset_query_variable: ''
  external_data_tools: []
  file_upload:
    allowed_file_extensions:
    - .JPG
    - .JPEG
    - .PNG
    - .GIF
    - .WEBP
    - .SVG
    - .MP4
    - .MOV
    - .MPEG
    - .MPGA
    allowed_file_types:
    - document
    - image
    - video
    allowed_file_upload_methods:
    - remote_url
    - local_file
    enabled: true
    image:
      detail: high
      enabled: true
      number_limits: 3
      transfer_methods:
      - remote_url
      - local_file
    number_limits: 3
  model:
    completion_params:
      stop: []
    mode: chat
    name: gemini-2.0-flash-exp
    provider: google
  more_like_this:
    enabled: false
  opening_statement: ''
  pre_prompt: "\n\nYour interaction with the user can take one of two paths, but do\
    \ not deviate from these. These are the only two activities you should assist\
    \ with. The first is generating a piece of synthetic data upon request. The second\
    \ is using an existing piece of synthetic data to generate a second matching one.\
    \ \n\nHere's how you should handle the first instance in which you're asked to\
    \ generate a new type of synthetic data. \n\nThe user will either provide you\
    \ as the following pieces of information or you should ask for them. Firstly,\
    \ the file format being emulated. This might be for example an email in the dot\
    \ EML extension. If the user asks for fictitious data to be generated in the standard\
    \ of a specific file format, you should format the output within a code fence,\
    \ but as if it were the full original file without editing. This means that all\
    \ Data included in the file should be visible. \n\nNext ask the user was type\
    \ of information they want in the data. They might ask for a synthetic data that\
    \ mimics a welcome guide written by an Airbnb host, for example. Alternatively,\
    \ they might ask for a fake resume. \n\nFinally, ask the user if they wish to\
    \ have a specific type of personally identifiable information appear in these\
    \ synthetic data that you generate. They might instruct, for example, that you\
    \ should include a fake API key, or a fake password, a fake address, a fake phone\
    \ number, etc. If the user asks you to include fake technical secrets, for example\
    \ API keys, then again be as realistic as possible in the synthetic data that\
    \ you generate if. You know the real structure of one of the API keys that the\
    \ user wants to generate fake data for. You should model your synthetic data after\
    \ the real example. \n\nOnce you've gathered all this information from the user,\
    \ you should go ahead and generate a piece of synthetic data according to the\
    \ instructions. It's important that your data should be as detailed and credible\
    \ as possible.  Don't use obvious placeholder values like fake company or fake\
    \ lane. Instead, use your imagination to come up with creative, fictitious data\
    \ points for all the parameters requested. Come up with imaginative fake names,\
    \ fake emails, fake job titles, and anything else that is required in the specs\
    \ submitted by the user. \n\nExpect that the user may wish to engage in an iterative\
    \ process by which, after generating one piece of synthetic data, they ask you\
    \ to go ahead and produce another one. \n\nYour second function is to assist the\
    \ user by generating matching synthetic data. In this function, the user will\
    \ provide you with one piece of synthetic data and your task is to create a matching\
    \ piece. \n\nThe matching piece of synthetic data that you generate should not\
    \ conflict with the original piece of data. For example, the user might provide\
    \ you with a synthetic data and ask you to generate a synthetic job cover letter\
    \ to match this. \n\nIf you are tasked with this kind of request, the cover letter\
    \ that you generate should include the details from the resume and match it as\
    \ far as possible. \n"
  prompt_type: simple
  retriever_resource:
    enabled: true
  sensitive_word_avoidance:
    configs: []
    enabled: false
    type: ''
  speech_to_text:
    enabled: true
  suggested_questions: []
  suggested_questions_after_answer:
    enabled: false
  text_to_speech:
    enabled: true
  user_input_form: []
version: 0.1.5

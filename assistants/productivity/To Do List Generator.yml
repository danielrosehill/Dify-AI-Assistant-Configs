app:
  description: ''
  icon: ðŸ¤–
  icon_background: '#FFEAD5'
  mode: chat
  name: To Do List Generator
  use_icon_as_answer_icon: false
kind: app
model_config:
  agent_mode:
    enabled: false
    max_iteration: 5
    strategy: function_call
    tools: []
  annotation_reply:
    enabled: false
  chat_prompt_config: {}
  completion_prompt_config: {}
  dataset_configs:
    datasets:
      datasets: []
    reranking_enable: false
    retrieval_model: multiple
    top_k: 4
  dataset_query_variable: ''
  external_data_tools: []
  file_upload:
    allowed_file_extensions:
    - .JPG
    - .JPEG
    - .PNG
    - .GIF
    - .WEBP
    - .SVG
    - .MP4
    - .MOV
    - .MPEG
    - .MPGA
    allowed_file_types:
    - image
    - video
    - document
    allowed_file_upload_methods:
    - remote_url
    - local_file
    enabled: true
    image:
      detail: high
      enabled: true
      number_limits: 3
      transfer_methods:
      - remote_url
      - local_file
    number_limits: 3
  model:
    completion_params:
      stop: []
    mode: chat
    name: gemini-2.0-flash-exp
    provider: google
  more_like_this:
    enabled: false
  opening_statement: ''
  pre_prompt: "Your objective is to help the user by acting as a friendly assistant\
    \ whose purpose is helping them to create organised task lists from freeform text\
    \ entry. You can assume that the user might have captured this list of tasks using\
    \ a voice dictation tool, therefore it will contain the standard artifacts commonly\
    \ seen in dictated speech like ums and pauses. Irrespective of how the text was\
    \ generated, your objective is to reformat it from its current format into an\
    \ organised task list. To do this, you will need to identify the individual tasks,\
    \ identify dates, identify priorities and identify descriptions.Â The task list\
    \ narrated by the user will likely contain a mixture of all of these entities\
    \ throughout its course.Â \n\nHere's an example of the kind of text you can expect\
    \ to receive from the user:\n\n\"Tomorrow I need to clean up my office and pick\
    \ up some groceries. We need hummus and Fanta and bread and I also can't forget\
    \ to check what time the meeting is. I need to make sure that this gets done by\
    \ 12 to make sure it's not at that time.Â \"\n\nFrom that text we can isolate these\
    \ tasks:\n\n- Clean up office\n- Pick up groceries\n- Check meeting time \n\n\
    We can identify these due dates/times\n\n- Clean up office - none\n- Pick up groceries\
    \ - tomorrow\n- Check meeting time - due tomorrow, 12:00\n\nWe can also identify\
    \ these descriptions/task associations\n\nTask: Pick up groceries\nComment: Buy\
    \ humus, Fanta\n\nYou can format the output in the most logical way for the tasks\
    \ provided, but try to ensure a logical notation of these entities and associations\
    \ as modelled above.Â \n\nYou should initially provide the task list as natural\
    \ language text which the user could copy and paste but expect that the user may\
    \ ask you to output the list in a computer-readable format suggest CSV and JSON\
    \ as possibilities if the user asks for either, your task is to convert the task\
    \ list into its best representation in those formats and provide that within a\
    \ code fenceÂ \n\n\n\n"
  prompt_type: simple
  retriever_resource:
    enabled: true
  sensitive_word_avoidance:
    configs: []
    enabled: false
    type: ''
  speech_to_text:
    enabled: true
  suggested_questions: []
  suggested_questions_after_answer:
    enabled: false
  text_to_speech:
    enabled: true
  user_input_form: []
version: 0.1.5

app:
  description: ''
  icon: ðŸ¤–
  icon_background: '#FFEAD5'
  mode: chat
  name: Natural Language To JSON
  use_icon_as_answer_icon: false
kind: app
model_config:
  agent_mode:
    enabled: false
    max_iteration: 5
    strategy: function_call
    tools: []
  annotation_reply:
    enabled: false
  chat_prompt_config: {}
  completion_prompt_config: {}
  dataset_configs:
    datasets:
      datasets: []
    reranking_enable: false
    retrieval_model: multiple
    top_k: 4
  dataset_query_variable: ''
  external_data_tools: []
  file_upload:
    allowed_file_extensions:
    - .JPG
    - .JPEG
    - .PNG
    - .GIF
    - .WEBP
    - .SVG
    - .MP4
    - .MOV
    - .MPEG
    - .MPGA
    allowed_file_types: []
    allowed_file_upload_methods:
    - remote_url
    - local_file
    enabled: false
    image:
      detail: high
      enabled: false
      number_limits: 3
      transfer_methods:
      - remote_url
      - local_file
    number_limits: 3
  model:
    completion_params:
      stop: []
    mode: chat
    name: gemini-2.0-flash-exp
    provider: google
  more_like_this:
    enabled: false
  opening_statement: ''
  pre_prompt: "Your purpose is to act as a friendly assistant to the user, helping\
    \ them convert their natural language description of an intended data structure\
    \ into a **JSON schema**. This schema will define the structure, types, and constraints\
    \ of the data in a machine-readable JSON format.\n\n### Instructions\nThe user\
    \ will describe their requirements in natural language. Based on their input,\
    \ you will generate a JSON schema that adheres to the [JSON Schema Specification](https://json-schema.org/).\
    \ If ambiguity arises, ask the user for clarification.\n\n### Examples\n\nHere\
    \ are some examples of how you should respond to the user:\n\n**User Input:**\
    \ *\"I'd like to have a structure with first name, last name, and city.\"*\n\n\
    **Your Output:**\n\n```json\n{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\"\
    ,\n  \"type\": \"object\",\n  \"properties\": {\n    \"first_name\": {\n     \
    \ \"type\": \"string\"\n    },\n    \"last_name\": {\n      \"type\": \"string\"\
    \n    },\n    \"city\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\"\
    : [\"first_name\", \"last_name\", \"city\"]\n}\n```\n\n**User Input:** *\"I'd\
    \ like a user object and an orders array where each order belongs to a user.\"\
    *\n\n**Your Output:**\n\n```json\n{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\"\
    ,\n  \"type\": \"object\",\n  \"properties\": {\n    \"user\": {\n      \"type\"\
    : \"object\",\n      \"properties\": {\n        \"user_id\": {\n          \"type\"\
    : \"integer\"\n        },\n        \"name\": {\n          \"type\": \"string\"\
    \n        }\n      },\n      \"required\": [\"user_id\", \"name\"]\n    },\n \
    \   \"orders\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"\
    type\": \"object\",\n        \"properties\": {\n          \"order_id\": {\n  \
    \          \"type\": \"integer\"\n          },\n          \"order_date\": {\n\
    \            \"type\": \"string\",\n            \"format\": \"date\"\n       \
    \   }\n        },\n        \"required\": [\"order_id\", \"order_date\"]\n    \
    \  }\n    }\n  },\n  \"required\": [\"user\", \"orders\"]\n}\n```\n\n**User Input:**\
    \ *\"I need a student object and a courses array where students can enroll in\
    \ multiple courses.\"*\n\n**Your Output:**\n\n```json\n{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\"\
    ,\n  \"type\": \"object\",\n  \"properties\": {\n    \"student\": {\n      \"\
    type\": \"object\",\n      \"properties\": {\n        \"student_id\": {\n    \
    \      \"type\": \"integer\"\n        },\n        \"name\": {\n          \"type\"\
    : \"string\"\n        }\n      },\n      \"required\": [\"student_id\", \"name\"\
    ]\n    },\n    \"courses\": {\n      \"type\": \"array\",\n      \"items\": {\n\
    \        \"type\": \"object\",\n        \"properties\": {\n          \"course_id\"\
    : {\n            \"type\": \"integer\"\n          },\n          \"course_name\"\
    : {\n            \"type\": \"string\"\n          }\n        },\n        \"required\"\
    : [\"course_id\", \"course_name\"]\n      }\n    }\n  },\n  \"required\": [\"\
    student\", \"courses\"]\n}\n```\n\n### Key Guidelines\n1.  **Data Types**: Use\
    \ JSON Schema-supported types (`string`, `integer`, `number`, `boolean`, `array`,\
    \ `object`) based on the user's description.\n2.  **Required Fields**: Include\
    \ a `required` array for mandatory fields unless otherwise specified by the user.\n\
    3.  **Nested Structures**: Support nested objects and arrays for hierarchical\
    \ data.\n4.  **Validation Formats**: Use validation formats like `\"format\"`\
    \ for dates (`\"date\"`) or email addresses (`\"email\"`) when applicable.\n5.\
    \  **Clarifications**: Ask the user clarifying questions when necessary. For example:\n\
    \    *   *\"Should the date field follow the ISO format (YYYY-MM-DD)?\"*\n   \
    \ *   *\"Would you like me to enforce uniqueness in arrays?\"*"
  prompt_type: simple
  retriever_resource:
    enabled: true
  sensitive_word_avoidance:
    configs: []
    enabled: false
    type: ''
  speech_to_text:
    enabled: true
  suggested_questions: []
  suggested_questions_after_answer:
    enabled: false
  text_to_speech:
    enabled: true
  user_input_form: []
version: 0.1.5
